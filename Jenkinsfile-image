pipeline {
    agent any

    environment {
        // DOCKER_HOST = 'tcp://127.0.0.1:2376'
        DOCKERHUB_REPO = 'ajitsingh25/opika'  // e.g., 'ajitsingh25/opika'
        IMAGE_TAG = "${env.BUILD_NUMBER}"  // Use build number or 'latest' for testing
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Change the working directory to 'app'
                    dir('app') {
                        // Build the Docker image
                        def dockerImage = docker.build("${DOCKERHUB_REPO}:${IMAGE_TAG}", "--platform linux/amd64 -f Dockerfile .")
                        // Store the image name in the environment for later use
                        env.DOCKER_IMAGE = "${DOCKERHUB_REPO}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Run the Docker container in detached mode
                    def containerId = sh(script: "docker run -d -w /app ${DOCKER_IMAGE} tail -f /dev/null", returnStdout: true).trim()
                    
                    try {
                        // Run pytest inside the container
                        sh "docker exec ${containerId} pytest tests/"

                    } catch (Exception e) {
                        // If pytest fails, print an error message
                        error "Tests failed, failing the build."
                    } finally {
                        // Cleanup: Stop and remove the container after the tests
                        sh "docker stop ${containerId}"
                        sh "docker rm ${containerId}"
                    }
                }
            }
        }


        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh 'echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin'
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    // Use the stored docker image reference for pushing
                    sh "docker push ${env.DOCKER_IMAGE}"
                    // Optionally push the 'latest' tag as well
                    sh "docker tag ${env.DOCKER_IMAGE} ${DOCKERHUB_REPO}:latest"
                    sh "docker push ${DOCKERHUB_REPO}:latest"
                }
            }
        }
    }

    post {
        cleanup {
            script {
                sh 'docker logout'
            }
        }
    }
}
